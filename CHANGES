Version 3.1 - 11 January 2022
    - Added pyqpp, a Python wrapper around Quantum++. See
      https://github.com/softwareQinc/qpp/wiki/8.-pyqpp for more details.
    - Minor update of Shor's algorithm example ["examples/shor.cpp"]
    - Renamed ["examples/qasm/qasm.cpp"] to ["examples/qasm/qpp_qasm.cpp"]
    - Due to phase discrepancies, by default the parser now uses Qiskit
      definitions (which are also the usual ones used in QC textbooks). To
      switch to standard OpenQASM 2.0 gate definitions, configure the project
      with `cmake -DUSE_OPENQASM2_SPECS=ON`.
    - Implemented qpp::QCircuit::
          get_dirty_dits()       - vector of used classical dits in the circuit
                                   (by either cCTRL or measurements)
          get_dirty_qudits()     - vector of used qudits in the circuit
          get_measured_nd()      - vector of qudits that were measured
                                   non-destructively
          get_measurement_dits() - vector of classical dits that participated in
                                   measurements
          is_measurement_dit()   - whether a classical dit participated in a
                                   measurement
    - Changed the ordering of bits in qpp::Bit_circuit::display(), so that the
      zero-th bit (top bit) is now the leftmost bit in the textual
      representation. That is, qpp::Bit_circuit assumes big-endian order.
    - Bugfixes

Version 3.0 - 5 October 2021
    - Major release, bumped up C++ standard to C++17
    - Decoupled the OpenQASM parser from the main codebase. A hard copy of
      qasmtools (https://github.com/softwareQinc/qasmtools) is now common to
      both staq and Quantum++, and by default uses standard OpenQASM 2.0 gate
      definitions. To switch to Qiskit definitions (which are also the usual
      ones used in QC textbooks), configure the project with
      `cmake -DUSE_QISKIT_SPECS=ON`.
    - Refactored qpp::internal::Singleton ["internal/classes/singleton.hpp"]
      so that qpp::internal::Singleton::get_instance() returns a thread local
      instance whenever the compiler supports thread_local. For more
      fine-grained control, one can use
          qpp::internal::Singleton::get_no_thread_local_instance()
          qpp::internal::Singleton::get_thread_local_instance()
    - Added qpp::schmidt() ["entanglement.hpp"] and improved the performance
      of singular value decomposition, thanks @antoine-bussy
      (https://github.com/antoine-bussy)

Version 2.7 - 1 August 2021
    - Added installation support and auto package detection via CMake
      find_package(qpp REQUIRED)
    - Simplified installation instructions ["INSTALL.md"]
    - Added an almost complete BB84 example ["examples/bb84.cpp"], does not
      include error correction and privacy amplification
    - Added CircleCI continuous integration
    - CMake minimum required version bumped to 3.12 for automatic unit tests
      detection by CMake and other CMake-related "good practices"
    - Unit testing and examples are now separate CMake targets, one needs to
      explicitly type 'make unit_testing' and/or 'make examples' to build the
      unit testing suite and/or the examples, respectively
    - Simplified unit testing, now one can run tests with 'ctest' or
      'make test' (after explicitly built with 'make unit_testing'). Use
      'GTEST_COLOR=1 ARGS="-V" make test' or 'GTEST_COLOR=1 ctest -V' for
      coloured verbose testing output.
    - Fixed minor inadvertence in OpenQASM `crz` implementation, see
      https://github.com/softwareQinc/qpp/issues/99
    - Changed the signature of qpp::cwise() ["functions.hpp"] so it takes the
      scalar argument by value (and not constant reference as before). This
      avoids an internal compiler error (ICE) triggered when compiling
      "examples/functor.cpp" in MinGW.
    - Removed <iostream> implicit dependencies ["qpp.h"]
    - Added optional "context" to qpp::Exception ["classes/exception.hpp"]
    - Made qpp::QCircuit default-constructible ["classes/circuits/circuits.hpp"]
      so it constructs by default a 1-qubit circuit with no classical bits
    - qpp::QEngine::reset() now accepts a default argument
      'bool reset_stats = true' and cleans the engine's statistics by default
      ["classes/circuits/engines.hpp"]
    - Renamed ["examples/qasm/qasm1.cpp"] and ["examples/qasm/qasm2.cpp"]
      to ["examples/qasm/qasm_teleport_minimal.cpp"] and
      ["examples/qasm/qasm.cpp"]; the latter executes an arbitrary OpenQASM
      program read from the standard input or from a file (if specified)
    - Added the aggregate qpp::QCircuit::Resources
      ["classes/circuits/circuits.hpp"] class for quantum circuit resource
      estimations. It derives from qpp::IDisplay and qpp::IJSON, so one can
      display instances of it as text or in JSON format.
    - Implemented qpp::QCircuit::get_resources() which returns an
      instance of qpp::QCircuit::Resources
    - Renamed "examples/circuits/quantum_phase_estimation.cpp" to
      "examples/circuits/qpe_circuit.cpp"
    - Added ["examples/qasm/coin_flip.qasm"] coin flipping OpenQASM example
      that can be run, e.g., with 'qasm < coin_flip.qasm [number of reps]'
    - qpp::measure() deducts the input state type (`qpp::ket` or `qpp::cmat`)
      and returns accordingly a set of kets or density matrices in its return
      tuple, thanks @anoine-bussy (https://github.com/antoine-bussy)
    - Implemented qpp::QCircuit::
          match_circuit_left()
          match_circuit_right()
      (and the corresponding free functions), that match circuit qudits in
      arbitrary order
    - Removed `cmath_cygwin.patch` as the problem was fixed since 2016.
    - Minor refactorings, code simplifications and bugfixes
    - Removed Travis CI

Version 2.6 - 9 January 2021
    - Added Quantum Phase Estimation low-level API example in
      "examples/qpe.cpp", courtesy of @ryanhill1, see
      https://github.com/softwareQinc/qpp/pull/91
    - Added Quantum Phase Estimation high-level API example in
      "examples/circuits/quantum_phase_estimation.cpp", thanks @DevelopDaily for
      the suggestion, https://github.com/softwareQinc/qpp/issues/96
    - qpp::load() and qpp::save() ["input_output.hpp"] now use C++ I/O streams
      instead of file names, and load/save in text format (instead of
      binary format), while preserving the required precision. The old load/save
      functions that use binary files for I/O are now moved to the qpp::obsolete
      namespace and are deprecated.
    - Minor API changes:
        ["MATLAB/matlab.hpp"]
          qpp::saveMATLAB() -> qpp::save_MATLAB()
          qpp::loadMATLAB() -> qpp::load_MATLAB()
        ["classes/circuits/circuits.hpp"]
          qpp::cCTRL_custom() -> qpp::cCTRL_joint()
          qpp::CTRL_custom()  -> qpp::CTRL_joint()
          qpp::gate_custom()  -> qpp::gate_joint()
    - Documentation improvements in ["classes/circuits/circuits.hpp"]
    - Updated Travis CI configuration

Version 2.5 - 28 November 2020
    - Significant improvements in qpp::QEngine::execute() for multiple runs
    - Changed all header extensions from ".h" to ".hpp" (except for "qpp.h")
    - Automatic OpenMP detection by CMake
    - CMake minimum required version bumped to 3.9 (3.12 for macOS) for
      automatic OpenMP detection
    - OpenQASM bugfixes
    - Renamed 'master' branch to 'main'

Version 2.4 - 13 May 2020
    - Enabled documentation searching by setting SEARCHENGINE = ON in
      "Doxyfile"
    - Implemented the following static member functions qpp::QCircuit::
          is_CTRL()     - gate step is a controlled gate or not
          is_cCTRL()    - gate step is a classically-controlled gate or not
          is_non_CTRL() - gate step is a non-controlled gate or not
    - Changed qpp::QCircuit::
          is_clean()  -> is_clean_qudit()
          get_clean() -> get_clean_qudits()
    - Split qpp::QCircuit::remove_clean() into qpp::QCircuit::
          remove_clean_qudit()  - removes single clean qudit from quantum
                                  circuit description
          remove_clean_qudits() - removes list of clean qudits from quantum
                                  circuit description
    - Implemented qpp::QCircuit::
          is_clean_dit()      - true if the classical dit is clean (not used),
                                false otherwise
          get_clean_dits()    - list of clean classical dits
          remove_clean_dit()  - removes single clean classical dit from
                                quantum circuit description
          remove_clean_dits() - removes list of clean classical dits from
                                quantum circuit description
    - Modified the signature of qpp::QCircuit::compress() to
      qpp::QCircuit::compress(bool compress_dits = false) so one can compress
      the clean classical dits as well
    - Removed the measured/non-measured qudits from qpp::QCircuit::display() and
      qpp::QEngine::display() since they make the output very large for quantum
      circuit descriptions with many qudits; kept them in the corresponding
      qpp::QCircuit::to_JSON() and qpp::QEngine::to_JSON() member functions
    - Implemented qpp::QEngine::set_dits() which sets all engine's classical
      dits at once

Version 2.3 - 2 May 2020
    - Added the following examples in the "examples" directory
          qram.cpp    - quantumly-accessible Random Access Memory over 
                        classical data
          layouts.cpp - various physical qubit layouts
    - Implemented qpp::QCircuit::
          bool operator==() const noexcept
          bool operator!=() const noexcept
      for quantum circuits simple (in)equality testing
    - Implemented
          qpp::super2kraus() - extracts a set of orthogonal (in the
                               Hilbert-Schmidt norm) Kraus operators from a
                               superoperator matrix ["operations.h"]
          qpp::bernoulli()   - generates Bernoulli-p random booleans
                               ["random.h"]
    - Kraus-related functions on full systems (not subsystems) now support
      input and output spaces of different dimensions, i.e., can now use
      non-square Kraus operators. All other Kraus-related functions for which
      the Kraus operators act on subsystems continue to require square Kraus
      operators.
    - Bugfix in qpp::QCircuit::add_circuit()
    - Fixed all Doxygen warnings (except spurious ones) 

Version 2.2 - 14 April 2020
    - Updated Google Test to version 1.10.0
    - Removed the Visual Studio solution (since it can be automatically
      generated by CMake), as we prefer to use CMake uniformly across all
      platforms
    - Implemented
          qpp::qRAM() - quantumly-accessible Random Access Memory over 
                        classical data (qRAM) ["operations.h"]
    - Added the new type qpp::qram for representing qRAM data ["types.h"]
    - Thanks to @DevelopDaily https://github.com/softwareQinc/qpp/issues/72,
      implemented qpp::QCircuit::
          is_clean()     - true if the qudit is clean (not used), false
                           otherwise
          get_clean()    - list of clean qudits
          remove_clean() - removes single/list of clean qudits from quantum
                           circuit description
          compress()     - removes unused qudits from quantum circuit
                           description
    - More robust MATLAB integration, detects MATLAB automatically when the
      CMake flag -DWITH_MATLAB=ON is specified; if CMake can not detect it
      automatically, pass the additional CMake flag
      -DMATLAB_INSTALL_DIR=/path/to/MATLAB to manually specify MATLAB's 
      location
    - Updated MATLAB mx-API, detects MX_HAS_INTERLEAVED_COMPLEX for MATLAB
      versions >= R2018a, see
      https://www.mathworks.com/help/matlab/matlab_external/matlab-support-for-interleaved-complex.html
      but also continues to work with older MATLAB versions < R2018a
    - Changed the CMake flag EIGEN3_INCLUDE_DIR to EIGEN3_INSTALL_DIR
      so it is consistent with the MATLAB_INSTALL_DIR CMake flag

Version 2.1 - 14 March 2020 (3.14.2020 Pi day release)
    - Migrated the repository to https://github.com/softwareQinc/qpp
    - Changed gate definitions in "qasm/preprocessor.h" so they agree with
      Qiskit, see https://github.com/softwareQinc/qpp/issues/65 and 
      https://github.com/softwareQinc/qpp/issues/70
    - Minor API change in the QEngine::execute()/reset()/reset_stats(), now
      they all return a reference to *this
    - Added Bit_circuit::display() and Bit_circuit::to_JSON() in "reversible.h"
    - Added the option for "shifted" control gates in:
          qpp::applyCTRL()
          qpp::Gates::CTRL()
          qpp::QCircuit::CTRL()
    - Implemented
          qpp::States::j() const - |j> computational basis state of a single
                                   qudit

Version 2.0 - 24 August 2019
    - Added support for OpenQASM via the interface "qasm/qasm.h" containing:
          qpp::QCircuit qpp::qasm::read_from_file(const std::string& fname)
            - reads a OpenQASM file and returns the qpp::QCircuit
              representation
          qpp::QCircuit qpp::qasm::read(std::ifstream& stream)
            - reads an input stream and returns the qpp::QCircuit
              representation
    - Added corresponding OpenQASM examples in the directory
      "examples/circuits/qasm"
    - Implemented qpp::QCircuit::
          kron()     - Kronecker product with another quantum circuit
                       description
          measureZ() - new overload that allows multiple targets at once
          adjoint()  - in place adjoint of quantum circuit description
          kron()     - in place Kronecker product with another quantum circuit
                       description
    - Implemented the corresponding free functions as friends of qpp::QCircuit:
          qpp::adjoint()     - adjoint of quantum circuit description
          qpp::kron()        - Kronecker product between two quantum circuit
                               descriptions
          qpp::replicate()   - replicates (repeats) a quantum circuit
                               description
          qpp::add_circuit() - adds two quantum circuit descriptions
    - Implemented qudit resetting and discarding functions qpp::QCircuit::
          reset()   - resets qudits in a quantum circuit description by
                      measuring them non-destructively in the computational
                      basis followed by shifting them back to the |0> state
          discard() - discards qudits in a quantum circuit description by
                      measuring them destructively and ignoring the result of
                      the measurement
    - Implemented the corresponding free functions in "instruments.h":
          qpp::reset()   - resets qudits in a multipartite state by measuring
                           them non-destructively in the computational basis
                           followed by shifting them back to the |0> state
          qpp::discard() - discards qudits by measuring them destructively and
                           ignoring the result of the measurement
    - Implemented qpp::QCircuit::set_name() - set the QCircuit name after
                                              construction
    - API change in qpp::QCircuit::cCTRL*(), now accepts an additional "shift"
      on the control dits
    - Split qpp::QCircuit::get_depth() into qpp::QCircuit::
          get_gate_depth()        - gate depth
          get_measurement_depth() - measurement depth
      for a finer control over depth computations
    - Added support for non-destructive measurements in "instruments.h" by
      modifying the API for:
          qpp::measure()
          qpp::measure_seq()
    - Added "classes/layouts.h" header file for representing different physical
      qudit layouts. Implemented the class(es):
          qpp::Lattice                 - qudits on a multi-dimensional
                                         orthogonal grid
          qpp::PeriodicBoundaryLattice - qudits on a multi-dimensional
                                         orthogonal grid with periodic boundary
                                         conditions
    - Removed the documentation directory (doc). To generate the documentation
      in HTML/LaTeX formats, run `doxygen` from the root of the project.

Version 1.3 - 25 July 2019
    - Minimum required CMake version is now 3.2
    - Added MSVC support for CMake
    - Updated Google Test to version 1.8.1
    - Added enum {RES, PROB, ST} in "constants.h" for using with std::get<> on
      the result of qpp::measure() etc.
    - Split the "classes/circuits.h" into "classes/circuits/circuits.h" and
      "classes/circuits/engines.h"
    - Added noisy quantum engine for non-correlated noise
    - Added noisy teleportation example (that uses a noisy quantum engine) in
      "examples/circuits/noisy_teleport_qubit_circuit.cpp"
    - Implemented qpp::QCircuit::
          QFT()            - Quantum Fourier Transform
          TFQ()            - inverse Quantum Fourier Transform
          get_gate_depth() - circuit gate depth
          add_qudit()      - adds qudit(s) on the fly
          add_dit()        - adds classical dit(s) on the fly
          add_circuit()    - adds a quantum circuit description to the current
                             one
          replicate()      - replicates (repeats) the current quantum circuit
                             description
    - Implemented qpp::Bit_circuit::
          get_gate_count() - classical reversible circuit gate count
          get_depth()      - classical reversible circuit gate depth

Version 1.2 - 10 February 2019
    - Added new function in "functions.h":
          qpp::normalize() - normalizes a state vector (ket or bra) or density
                             matrix
    - Added new functions in "number_theory.h":
          qpp::convergents() - overloads that compute the convergents from a
                               continued fraction or a real number, see
                               http://mathworld.wolfram.com/Convergent.html
    - Added new functions in "operations.h":
          qpp::TFQ()      - inverse qudit quantum Fourier transform (includes
                            qubit QFT as a special case) on an entire quantum
                            state (state vector or density matrix)
          qpp::applyTFQ() - apply the inverse qudit quantum Fourier transform
                            on a subset of qudits of a state vector or
                            density matrix
    - Added new member functions for qpp::Gates:
          qpp::Gates::MODMUL() - quantum modular multiplication
    - Added Shor's algorithm example in "examples/shor.cpp"
    - Introduced the largest unsigned index qpp::idx_inf in "constants.h"
    - Added new exception classes in "classes/exception.h":
          qpp::exception::QuditAlreadyMeasured - self-explanatory
          qpp::exception::Duplicates      - thrown when a system such as a
                                            std::vector contains duplicates
          qpp::exception::NotImplemented  - code not yet implemented
          qpp::exception::InvalidIterator - invalid iterator (not initialized,
                                            past end, etc.)
    - Added std::string qpp::Gates::get_name(const cmat&) function which
      returns
      the names of the most common (one, two and three) qubit gates
    - Added new header file "classes/noise.h" and corresponding classes for
      simulating quantum noise (e.g. depolarizing, dephasing etc.) and a
      corresponding simple example in "examples/noise.cpp"
    - Added new abstract class qpp::IJSON in "classes/idisplay.h" for very
      basic JSON serialization support, and corresponding
      qpp::QCircuit::to_JSON() and qpp::QEngine::to_JSON()
    - Added new classes in the new header file "classes/circuits.h" for
      simulating qudit quantum circuits:
          qpp::QCircuit - Quantum circuit description, does not effectively
                            perform any operations
          qpp::QEngine  - Quantum engine for simulation of quantum circuits
    - Added new circuit simulator examples in "examples/circuits":
          teleport_qubit_circuit.cpp - qubit teleportation circuit example
          teleport_qudit_circuit.cpp - qudit teleportation circuit example
    - Removed qpp::eps constant from "constants.h", as one should simply use
      direct comparison with 0 when dealing with small doubles
    - Added support for hashing Eigen matrices/vectors/expressions via
      qpp::hash_eigen() in "functions.h"; code based on
      boost::hash_combine(), see 
      https://www.boost.org/doc/libs/1_69_0/doc/html/hash/reference.html\#boost.hash_combine

Version 1.1 - 26 November 2018
    - Added new functions in "operations.h":
          qpp::QFT()      - qudit quantum Fourier transform (includes qubit
                            QFT as a special case) on an entire quantum state
                            (state vector or density matrix)
          qpp::applyQFT() - qpply the qudit quantum Fourier transform on a
                            subset of qudits of a state vector or density
                            matrix
    - Added Quantum Fourier transform example in "examples/qft.cpp"
    - Added new member functions for qpp::Gates:
          qpp::Gates::RX()   - rotation around X
          qpp::Gates::RY()   - rotation around Y
          qpp::Gates::RZ()   - rotation around Z
          qpp::Gates.SWAPd() - qudit SWAP gate
    - Added a suite of stress tests in "stress_tests" (only for POSIX systems)
    - Added Qiskit and QuTiP stress tests in "stress_tests/python"

Version 1.0 - 3 July 2018
    - Added full support for reversible classical circuits, added
      "classes/reversible.h" header file that contains the following classes:
          qpp::Dynamic_bitset - bitsets of variable length
          qpp::Bit_circuit    - classical reversible circuits
    - Added "examples/reversible.cpp" example
    - The path to MATLAB can now be specified in the CMake command line (not
      hard coded anymore), such as
          cmake .. -DWITH_MATLAB="/Applications/MATLAB_R2017b.app"
    - qpp::ket operator "" _ket(), qpp::ket operator "" _bra() and
      qpp::ket operator "" _prj() are now inside the newly introduced inline
      namespace qpp::literals
    - Minor bug in qpp::Exception::what(), thanks Nick Lewycky for spotting it
    - Updated the Wiki

Version 1.0-rc4 - Release Candidate 4, 24 January 2018
    - Changed qpp::ket operator "" _q() to qpp::ket operator "" _ket()
    - Added qpp::bra operator "" _bra() and qpp::cmat operator "" _prj()
    - Updated documentation

Version 1.0-rc3 - Release Candidate 3, 21 January 2018
    - License change from GPL to MIT
    - Added Visual Studio 2017 solution
    - Added support for AppVeyor continuous integration 
    - Added support for reversible classical circuits, via the following
      classes in "experimental.h":
          qpp::experimental::Dynamic_bitset - bitsets of variable length
          qpp::experimental::Bit_circuit    - classical reversible circuits
    - Added qpp::ket operator "" _q() helper in "functions.h" for constructing
      multi-partite qubit kets
    - Added comprehensive Wiki instead of the quick starting guide  

Version 1.0-rc2 - Release Candidate 2, 6 September 2017
    - Added serialization capabilities for the PRNG in qpp::RandomDevices from
      "classes/random_devices.h":
          qpp::RandomDevices::load() - loads the state of PRNG from a stream
          qpp::RandomDevices::save() - saves the state of PRNG to a stream
    - Added a getter for qpp::RandomDevices::prng_ (now with private access):
          qpp::RandomDevices::get_prng()
    - Eigen3 is detected automatically by CMake (if Eigen3 was installed via a
      package manager). If not, it can be specified manually by passing the
      -DEIGEN3_INCLUDE_DIR=/path/to/eigen3 flag to the CMake command line.

Version 1.0-rc1 - Release Candidate 1, 11 November 2016
    - Slight performance improvements (lambda workers do not capture by value
      anymore)
    - API change in "classes/exception.h": now all Quantum++ exceptions have
      their own type, being derived from the base exception class
      qpp::exception::Exception. All exception classes are now in their
      separate namespace qpp::exception.

Version 1.0.0-beta4 - 2 November 2016
    - Added new functions in "classes/states.h":
          qpp::States::zero()  - zero state of n qudits
          qpp::States::one()   - one state of n qudits
          qpp::States::jn()    - |jj...j> state of n qudits
          qpp::States::plus()  - plus state of n qubits
          qpp::States::minus() - minus state of n qubits
    - Corrected qpp::is_matrix_expression<> type trait so now it works fine
          Thanks to @davidhigh http://stackoverflow.com/a/40293333/3093378
    - Fixed bug in qpp::cor()
    - Renamed qpp::loadMATLABmatrix() and saveMATLABmatrix() to
      qpp::loadMATLAB() and qpp::saveMATLAB(), respectively. Slightly changed
      their implementation so now one can load/save any Eigen type, similarly
      to qpp::load() and qpp::save().
    - Almost full code coverage via unit testing

Version 1.0.0-beta3 - 22 October 2016
    - Added support for Travis CI continuous integration
    - Added new functions in "classes/states.h":
          qpp::States::mes() - maximally entangled state of 2 qudits
    - Added new functions in "random.h":
          qpp::randprob() - random probability vector uniformly distributed
                            over the probability simplex

Version 1.0.0-beta2 - 13 October 2016
    - Updated to GoogleTest 1.8.0 for unit testing
    - Added d = 2 overloads for all functions that take a list of dimensions
      as one of their arguments
    - Additional code sanitizing and unit testing

Version 1.0.0-beta1 - 10 October 2016
    - GoogleMock 1.7.0 is now included in the project for portable unit testing
      (see the README.md file for more details)
    - Removed the qpp::ubigint type so there is no more danger of mixing signed
      and unsigned types. All related functions now use qpp::bigint.
    - Fixed overflow bug in qpp::powm() when numbers were very large
    - qpp::isprime() is now based on the Miller-Rabin primality test
    - qpp::rand(Type a, Type b) family of functions now throw if b > a for
      integer types or when a == b for floating-point types
    - Added new functions in "number_theory.h":
          qpp::randprime() - random prime number generator
          qpp::modmul()    - modular multiplication that avoids overflows
    - Additional unit testing, added unit testing skeleton for all codebase

Version 0.8.8.2 - 3 October 2016
    - This is a bug-fix release
    - Fixed compile bug in qpp::measure_seq() due to trying to modify a const
      copy, which should have been non-const

Version 0.8.8 - 30 September 2016
    - Added OpenMP support for clang >= 3.7 in CmakeLists.txt
    - Required minimum CMake version is now 3.0
    - Added more unit testing, "number_theory.h" is now fully tested
    - Split unit testing in separate files according to the tested header file
    - Fixed typo in CMakeLists.txt which in effect disabled OpenMP
      for version 0.8.6. PLEASE use the CMakeLists.txt from current version!
    - SFINAE for all functions that have STL-containers as parameters
    - Improved performance via removing unnecessary copy, see Issue #31,thanks
      @vasekp
    - Corrected code typo in qpp::internal::Singleton<T>, see Issue #35, thanks
      @titaschanda
    - Fixed critical bug in qpp::lcm(const std::vector<bigint>&)
    - Fixed critical bug in qpp::x2contfrac()
    - Added new functions in "number_theory.h":
          qpp::egcd()   - extended greatest common divisor algorithm
          qpp::modinv() - modular inverse of a mod p

Version 0.8.6 - 1 November 2015
    - Fixed serious bug in qpp::applyCTRL(), which was failing before for
      control gates with 2 or more controls. Added unit test in
      "unit_tests/testing.cpp".
    - Removed "macros.h" preprocessor debug macros header added in v0.8.4

Version 0.8.4 - 14 October 2015
    - Added "macros.h" preprocessor debug macros header, containing:
          PRINT(x)   - std::cout << (x)
          PRINTLN(x) - std::cout << (x) << std::endl
          ERROR(x)   - std::cerr << (x)
          ERRORLN(x) - std::cerr << (x) << std::endl
    - Added new functions in "operations.h":
          qpp::ip() - Generalized inner product
    - Modified qpp::measure() so that the output consists of pure states
      whenever the input is a pure state and the measurement operators are
      rank-one POVMs (technically rank-one Kraus operators). Includes basis
      measurements as a particular case.
    - Improved qpp::Timer<>, now both the duration and the clock's type can be
      specified as template parameters, defaulted to
      std::chrono::duration<double> and std::chrono::steady_clock, respectively

Version 0.8.2 - 20 May 2015
    - Added "traits.h" type traits header file with the following type traits:
          qpp::is_iterable<> - checks for iterable STL-like containers
          qpp::is_matrix_expression<> - checks for Eigen::MatrixBase<>
          expressions
          qpp::is_complex<>  - checks whether the type is std::complex<>
    - Added "statistics.h" header file containing the following new functions:
          qpp::uniform()    - uniform probability distribution vector
          qpp::marginalX()  - marginal distribution
          qpp::marginalY()  - marginal distribution
          qpp::avg()        - average
          qpp::sigma()      - standard deviation
          qpp::cov()        - covariance
          qpp::cor()        - correlation
          qpp::var()        - variance
    - Added new examples in the directory "examples"

Version 0.8 - 8 May 2015
    - Added new data type aliases in "types.h"
          bigint  - Big integer, alias for long long int
          ubigint - Non-negative big integer, alias for unsigned long long int
    - Added new overloads in "random.h":
          qpp::rand() - overloads for bigint and ubigint
    - Added new functions in "number_theory.h":
          qpp::modpow() - computes a^n mod p for non-negative integers
    - Added IDisplay as an abstract base class for enforcing the override of
      its member function
          std::ostream& IDisplay::display(std::ostream&) const
      in all derived classes. This latter function performs all of the stream
      extraction operator work, and it is invoked automatically by the
          friend std::ostream& operator<<(std::ostream&, const qpp::IDisplay&)
      defined inline in qpp::IDisplay. In other words, the extraction operator
      delegates the work to the virtual display() function. Finally, all
      classes that support stream extraction (qpp::IOManipEigen,
      qpp::IOManipPointer, qpp::IOManipRange and qpp::Timer) now inherit from
      qpp::IDisplay.
    - Replaced std::basic_ostream<charT, traits> by std::ostream in all code,
      as using traits over-complicated the design and it was not worth it
    - Marked final all classes that are not intended to be used as base classes
    - Modified the CMakeLists.txt, which now:
        - supports only GNU gcc and LLVM/Apple clang, otherwise emits an error
          during the CMake running phase
        - adds -D_NO_THREAD_LOCAL definition for conditional compiling the
          source code without support for std::thread_local (if using e.g.
          LLVM/Apple clang with libc++, as libc++ does not yet support
          std::thread_local)
        - uses OpenMP only if the compiler is detected as GNU gcc

Version 0.7 - 22 April 2015
    - Marked all non-template functions defined in headers as "inline" and all
      singletons as "static", since otherwise including "qpp.h" in separate
      compilation units led to linker errors due to duplicated symbols

Version 0.6 - 16 April 2015
    - Reverted changes to qpp::internal::Singleton<T> (no need anymore for
      static void operator delete(void*)), but clients have to explicitly mark
      both constructor and destructor private
    - Minor cosmetic changes

Version 0.5 - 19 March 2015
    - Fixed a bug in class qpp::internal::Singleton<T> which allowed deleting
      the instance via a pointer. Now static void operator delete(void*) is
      marked private.

Version 0.4 - 8 March 2015
    - Added noexcept specification where suitable
    - Added the following exception types to the qpp::Exception::Type strong
      enumeration: NOT_QUBIT_MATRIX (replaces previous NOT_QUBIT_GATE),
      NOT_QUBIT_CVECTOR, NOT_QUBIT_RVECTOR and NOT_QUBIT_VECTOR
    - Added overloads of qpp::ptrace1(), qpp::ptrace2(), qpp::ptrace() and
      qpp::ptranspose() that allow a pure state input, as it was the case
      before with qpp::syspermute()
    - Added overloads of qpp::prod() and qpp::sum() for STL-like containers
    - Added new functions in "functions.h":
          qpp::complement()  - computes the complement of a subsystem vector
          qpp::rho2bloch()   - qubit density matrix to Bloch vector
          qpp::bloch2rho()   - Bloch vector to qubit density matrix
    - Added new functions in "instruments.h":
          qpp::measure_seq() - measures subsystems sequentially
    - Removed support for the C-style random number engine, as it is not thread
      safe. Hence, Eigen::Matrix::Random() should not be used, use instead
      qpp::rand() functions.
    - Added support for unit testing via Google Mock/Google Test, see
      "unit_tests/testing.cpp"

Version 0.3 - 15 February 2015
    - Added qpp::internal::Singleton<T>::get_thread_local_instance()

Version 0.2 - 26 January 2015
    - Minor fixes
    - Added prime-number related functions in "number_theory.h":
          qpp::factors() - prime factors of positive integer
          qpp::isprime() - primality test

Version 0.1 - 21 December 2014
    - First stable version, initial public release
