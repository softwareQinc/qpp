Version 1.0-devel - Development
    - The path to MATLAB can now be specified in the CMake command line
      (not hard coded anymore), such as
          cmake -DWITH_MATLAB="/Applications/MATLAB_R2017b.app" ..

Version 1.0-rc4 - Release Candidate 4, 24 January 2018
    - Changed qpp::ket operator "" _q() to qpp::ket operator "" _ket()
    - Added qpp::bra operator "" _bra() and qpp::cmat operator "" _prj() as well
    - Updated documentation

Version 1.0-rc3 - Release Candidate 3, 21 January 2018
    - License change from GPL to MIT
    - Added Visual Studio 2017 solution
    - Added support for AppVeyor continuous integration 
    - Added support for reversible classical circuits, via the following
      classes in "experimental.h":
        qpp::experimental::Dynamic_bitset
        qpp::experimental::Bit_circuit
    - Added qpp::ket operator "" _q() helper in "functions.h" for constructing
        multi-partite qubit kets
    - Added comprehensive Wiki instead of the quick starting guide  

Version 1.0-rc2 - Release Candidate 2, 6 September 2017
    - Added serialization capabilities for the PRNG in qpp::RandomDevices from
      "classes/random_devices.h":
        qpp::RandomDevices::load() - loads the state of PRNG from a stream
        qpp::RandomDevices::save() - saves the state of PRNG to a stream
    - Added a getter for qpp::RandomDevices::prng_ (now with private access):
        qpp::RandomDevices::get_prng()
    - Eigen3 is detected automatically by CMake (if Eigen3 was installed via a
        package manager). If not, it can be specified manually by passing the
        -DEIGEN3_INCLUDE_DIR=path_to_eigen3 flag to the CMake command line.

Version 1.0-rc1 - Release Candidate 1, 11 November 2016
    - Slight performance improvements (lambda workers do not capture by value
        anymore)
    - API change in "classes/exception.h": now all Quantum++ exceptions have
        their own type, being derived from the base exception class
        qpp::exception::Exception. All exception classes are now in their
        separate namespace qpp::exception.

Version 1.0.0-beta4 - 2 November 2016
    - Added new functions in "classes/states.h":
        qpp::States::zero()  - zero state of n qudits
        qpp::States::one()   - one state of n qudits
        qpp::States::jn()    - |jj...j> state of n qudits
        qpp::States::plus()  - plus state of n qubits
        qpp::States::minus() - minus state of n qubits
    - Corrected qpp::is_matrix_expression<> type trait so now it works fine
        Thanks to @davidhigh http://stackoverflow.com/a/40293333/3093378
    - Fixed bug in qpp::cor()
    - Renamed qpp::loadMATLABmatrix() and saveMATLABmatrix() to 
        qpp::loadMATLAB() and qpp::saveMATLAB(), respectively. Slightly 
        changed their implementation so now one can load/save any Eigen type,
        similarly to qpp::load() and qpp::save().
    - Almost full code coverage via unit testing

Version 1.0.0-beta3 - 22 October 2016
    - Added support for Travis CI continuous integration
    - Added new functions in "classes/states.h":
        qpp::States::mes() - maximally entangled state of 2 qudits
    - Added new functions in "random.h":
        qpp::randprob() - random probability vector uniformly distributed over
                          the probability simplex

Version 1.0.0-beta2 - 13 October 2016
    - Updated to GoogleTest 1.8.0 for unit testing
    - Added d = 2 overloads for all functions that take a list of dimensions
      as one of their arguments
    - Additional code sanitizing and unit testing

Version 1.0.0-beta1 - 10 October 2016
    - GoogleMock 1.7.0 is now included in the project for portable unit testing
        (see the README.md file for more details)
    - Removed the qpp::ubigint type so there is no more danger of mixing
        signed and unsigned types. All related functions now use qpp::bigint.
    - Fixed overflow bug in qpp::powm() when numbers were very large
    - qpp::isprime() is now based on the Miller-Rabin primality test
    - qpp::rand(Type a, Type b) family of functions now throw if b > a for
        integer types or when a == b for floating-point types
    - Added new functions in "number_theory.h":
        qpp::randprime() - random prime number generator
        qpp::modmul()    - modular multiplication that avoids overflows
    - Additional unit testing, added unit testing skeleton for all codebase

Version 0.8.8.2 - 3 October 2016
    - This is a bug-fix release
    - Fixed compile bug in qpp::measure_seq() due to trying to modify a const
        copy, which should have been non-const

Version 0.8.8 - 30 September 2016
    - Added OpenMP support for clang >= 3.7 in CmakeLists.txt
    - Required minimum CMake version is now 3.0
    - Added more unit testing, "number_theory.h" is now fully tested
    - Split unit testing in separate files according to the tested header file
    - Fixed typo in CMakeLists.txt which in effect disabled OpenMP
        for version 0.8.6. PLEASE use the CMakeLists.txt from current version!
    - SFINAE for all functions that have STL-containers as parameters
    - Improved performance via removing unnecessary copy, see Issue #31,
        thanks @vasekp
    - Corrected code typo in qpp::internal::Singleton<T>, see Issue #35,
        thanks @titaschanda
    - Fixed critical bug in qpp::lcm(const std::vector<bigint>&)
    - Fixed critical bug in qpp::x2contfrac()
    - Added new functions in "number_theory.h":
        qpp::egcd()   - extended greatest common divisor algorithm
        qpp::modinv() - modular inverse of a mod p

Version 0.8.6 - 1 November 2015
    - Fixed serious bug in qpp::applyCTRL(), which was failing before for
        control gates with 2 or more controls. Added unit test in
        ./unit_tests/testing.cpp.

Version 0.8.4 - 14 October 2015
    - Added "macros.h" preprocessor debug macros header, containing:
        PRINT(x)   - std::cout << (x)
        PRINTLN(x) - std::cout << (x) << std::endl
        ERROR(x)   - std::cerr << (x)
        ERRORLN(x) - std::cerr << (x) << std::endl
    - Added new functions in "operations.h":
        qpp::ip()  - Generalized inner product
    - Modified qpp::measure() so that the output consists of pure states
        whenever the input is a pure state and the measurement operators are
        rank-one POVMs (technically rank-one Kraus operators). Includes basis
        measurements as a particular case.
    - Improved qpp::Timer<>, now both the duration and the clock's type can be
        specified as template parameters, defaulted to
        std::chrono::duration<double> and std::chrono::steady_clock,
        respectively

Version 0.8.2 - 20 May 2015
    - Added "traits.h" type traits header file with the following type traits:
        qpp::is_iterable<> - checks for iterable STL-like containers
        qpp::is_matrix_expression<> - checks for Eigen::MatrixBase<> expressions
        qpp::is_complex<>  - checks whether the type is std::complex<>
    - Added "statistics.h" header file containing the following new functions:
        qpp::uniform()     - uniform probability distribution vector
        qpp::marginalX()   - marginal distribution
        qpp::marginalY()   - marginal distribution
        qpp::avg()         - average
        qpp::sigma()       - standard deviation
        qpp::cov()         - covariance
        qpp::cor()         - correlation
        qpp::var()         - variance
    - Added new examples in ./examples

Version 0.8 - 8 May 2015
    - Added new data type aliases in "types.h"
        bigint        - Big integer, alias for long long int
        ubigint       - Non-negative big integer, alias for
                        unsigned long long int
    - Added new overloads in "random.h":
        qpp::rand()   - overloads for bigint and ubigint
    - Added new functions in "number_theory.h":
        qpp::modpow() - computes a^n mod p for non-negative integers
    - Added IDisplay as an abstract base class for enforcing the override of
        its member function
            std::ostream& IDisplay::display(std::ostream&) const
        in all derived classes. This latter function performs all of the stream
        extraction operator work, and it is invoked automatically by the
            friend std::ostream& operator<<(std::ostream&, const qpp::IDisplay&)
        defined inline in qpp::IDisplay. In other words, the extraction
        operator delegates the work to the virtual display() function.
        Finally, all classes that support stream extraction (qpp::IOManipEigen,
        qpp::IOManipPointer, qpp::IOManipRange and qpp::Timer) now inherit
        from qpp::IDisplay.
    - Replaced std::basic_ostream<charT, traits> by std::ostream in all code,
        as using traits over-complicated the design and it was not worth it
    - Marked final all classes that are not intended to be used as base classes
    - Modified the CMakeLists.txt, which now:
        - supports only GNU gcc and LLVM/Apple clang, otherwise emits an error
          during the CMake running phase
        - adds -D_NO_THREAD_LOCAL definition for conditional compiling the
          source code without support for std::thread_local (if using e.g.
          LLVM/Apple clang with libc++, as libc++ does not yet support
          std::thread_local)
        - uses OpenMP only if the compiler is detected as GNU gcc

Version 0.7 - 22 April 2015
    - Marked all non-template functions defined in headers as "inline" and
        all singletons as "static", since otherwise including "qpp.h" in
        separate compilation units led to linker errors due to duplicated
        symbols

Version 0.6 - 16 April 2015
    - Reverted changes to qpp::internal::Singleton<T> (no need anymore for
        static void operator delete(void*)), but clients have to explicitly
        mark both constructor and destructor private
    - Minor cosmetic changes

Version 0.5 - 19 March 2015
    - Fixed a bug in class qpp::internal::Singleton<T> which allowed deleting
        the instance via a pointer. Now static void operator delete(void*) 
        is marked private.

Version 0.4 - 8 March 2015
    - Added noexcept specification where suitable
    - Added the following exception types to the qpp::Exception::Type strong
        enumeration: NOT_QUBIT_MATRIX (replaces previous NOT_QUBIT_GATE),
        NOT_QUBIT_CVECTOR, NOT_QUBIT_RVECTOR and NOT_QUBIT_VECTOR
    - Added overloads of qpp::ptrace1(), qpp::ptrace2(), qpp::ptrace() and
        qpp::ptranspose() that allow a pure state input, as it was the case
        before with qpp::syspermute()
    - Added overloads of qpp::prod() and qpp::sum() for STL-like containers
    - Added new functions in "functions.h":
        qpp::complement()  - computes the complement of a subsystem vector
        qpp::rho2bloch()   - qubit density matrix to Bloch vector
        qpp::bloch2rho()   - Bloch vector to qubit density matrix
    - Added new functions in "instruments.h":
        qpp::measure_seq() - measures subsystems sequentially
    - Removed support for the C-style random number engine, as it is not 
        thread safe. Hence, Eigen::Matrix::Random() should not be used, 
        use instead qpp::rand() functions.
    - Added support for unit testing via Google Mock/Google Test, see
        ./unit_tests/testing.cpp

Version 0.3 - 15 February 2015
    - Added qpp::internal::Singleton<T>::get_thread_local_instance()

Version 0.2 - 26 January 2015
    - Minor fixes
    - Added prime-number related functions in "number_theory.h":
        qpp::factors() - prime factors of positive integer
        qpp::isprime() - primality test

Version 0.1 - 21 December 2014
    - First stable version, initial public release
