{"name":"Quantum++","tagline":"C++11 quantum computing library","body":"## Version 0.8 - 8 May 2015\r\n\r\n<!---\r\n### Development branch, use it at your own risk!\r\n### Switch to the master branch for the latest stable version.\r\n--->\r\n\r\nQuantum++ is a C++11 general purpose quantum computing library, composed \r\nsolely of template header files. It uses the \r\n[Eigen 3](http://eigen.tuxfamily.org) linear algebra library and, \r\nif available, the [OpenMP](http://openmp.org/) multi-processing library. \r\nFor additional [Eigen 3](http://eigen.tuxfamily.org) documentation see \r\n<http://eigen.tuxfamily.org/dox/>. For a simple \r\n[Eigen 3](http://eigen.tuxfamily.org) quick ASCII reference see\r\n<http://eigen.tuxfamily.org/dox/AsciiQuickReference.txt>.\r\n\r\nQuantum++ is not restricted to qubit systems or specific quantum \r\ninformation processing tasks, being capable of simulating arbitrary quantum \r\nprocesses. The main design factors taken in consideration were the ease of \r\nuse, high portability, and high performance.\r\n\r\nIf you are interesting in contributing, please contact me. \r\nTo contribute, you need to have a decent knowledge of C++ (preferably C++11), \r\nincluding templates and the standard library, a basic knowledge of \r\nquantum computing and linear algebra, and some working experience \r\nwith [Eigen 3](http://eigen.tuxfamily.org).\r\n\r\nCopyright (c) 2013 - 2015 Vlad Gheorghiu, vgheorgh AT gmail DOT com.\r\n\r\n---\r\nQuantum++ is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nQuantum++ is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with Quantum++.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n---\r\n## Building instructions\r\n\r\n### Configuration:\r\n\r\n- Compiler: [g++](https://gcc.gnu.org/) version 4.8 or later \r\n(for good C++11 support)\r\n- [Eigen 3](http://eigen.tuxfamily.org) library located in `$HOME/eigen`\r\n- Quantum++ library located in `$HOME/qpp`\r\n- [MATLAB](http://www.mathworks.com/products/matlab/) compiler \r\ninclude header files:\r\n`/Applications/MATLAB_R2014b.app/extern/include`\r\n- [MATLAB](http://www.mathworks.com/products/matlab/) compiler \r\nshared library files:\r\n`/Applications/MATLAB_R2014b.app/bin/maci64`\r\n\r\n\r\n### Building without a build system\r\n\r\n- Example file: `$HOME/qpp/examples/example.cpp`\r\n- Output executable: `$HOME/qpp/examples/example`\r\n- Must run the commands below from inside the directory `$HOME/qpp/examples` \r\n\r\n#### Release version (without [MATLAB](http://www.mathworks.com/products/matlab/) support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -O3 -DNDEBUG -DEIGEN_NO_DEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n         example.cpp -o example\r\n\r\n#### Debug version (without [MATLAB](http://www.mathworks.com/products/matlab/) support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -g3 -DDEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n          example.cpp -o example\r\n\r\n#### Release version (with [MATLAB](http://www.mathworks.com/products/matlab/) support): \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -O3 -DNDEBUG -DEIGEN_NO_DEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n         -I/Applications/MATLAB_R2014b.app/extern/include \\\r\n         -L/Applications/MATLAB_R2014b.app/bin/maci64 \\\r\n         -lmx -lmat example.cpp -o example\r\n\r\n#### Debug version (with [MATLAB](http://www.mathworks.com/products/matlab/) support):  \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -g3 -DDEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n         -I /Applications/MATLAB_R2014b.app/extern/include \\\r\n         -L /Applications/MATLAB_R2014b.app/bin/maci64 \\\r\n         -lmx -lmat example.cpp -o example\r\n\r\n\r\n### Building using [cmake](http://www.cmake.org/)\r\n\r\nThe current version of the repository has a `./CMakeLists.txt` configuration file\r\nfor building examples using [cmake](http://www.cmake.org/). \r\nTo build an example using [cmake](http://www.cmake.org/), \r\nI recommend an out-of-source build, i.e., from the root of the project \r\n(where `./include` is located), type\r\n\r\n    mkdir ./build\r\n    cd ./build\r\n    cmake ..\r\n    make\r\n\r\nThe above commands build the relase version (default) executable `qpp`, \r\nfrom the source file `./examples/example.cpp`,\r\nwithout [MATLAB](http://www.mathworks.com/products/matlab/) support (default), \r\ninside the directory `./build`. To build a different configuration, \r\ne.g. debug version with [MATLAB](http://www.mathworks.com/products/matlab/) \r\nsupport, type from the root of the project\r\n\r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_MATLAB=ON ..\r\n    make\r\n    \r\nOr, to disable [OpenMP](http://openmp.org/) support (enabled by default), type\r\n   \r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DWITH_OPENMP=OFF ..\r\n    make\r\n\r\nTo change the name of the example file, the location of the\r\n[Eigen 3](http://eigen.tuxfamily.org)\r\nlibrary or the location of [MATLAB](http://www.mathworks.com/products/matlab/) \r\ninstallation, edit the `./CMakeLists.txt` file. See also `./CMakeLists.txt` \r\nfor additional options. Do not forget to remove everything from \r\nthe `./build` directory before a fresh build!\r\n\r\n\r\n### Additional remarks\r\n\r\n- The C++ compiler must be C++11 compliant.\r\n\r\n- If using [Windows](http://windows.microsoft.com/), I recommend compiling \r\nunder [cygwin](https://www.cygwin.com) via [cmake](http://www.cmake.org/)\r\nand [g++](https://gcc.gnu.org/). \r\nSee also <http://stackoverflow.com/questions/28997206/cygwin-support-for-c11-in-g4-9-2>\r\nfor a bug related to lack of support for some C++11 math functions, and\r\nhow to fix it. Quick fix: patch the standard library header file `<cmath>` \r\nusing the provided patch `./cmath_cygwin.patch`.\r\n\r\n- If your compiler does not support [OpenMP](http://openmp.org/) \r\n(as it is the case e.g with [clang++](http://clang.llvm.org/)), \r\ndisable [OpenMP](http://openmp.org/) in your build, \r\nas otherwise the linker may not find the \r\n[gomp](https://gcc.gnu.org/projects/gomp/) library.\r\n\r\n- If you run the program on [OS X](http://www.apple.com/osx) with \r\n[MATLAB](http://www.mathworks.com/products/matlab/) support, make sure that \r\nthe environment variable `DYLD_LIBRARY_PATH` is set to point to the \r\n[MATLAB](http://www.mathworks.com/products/matlab/) \r\ncompiler library location, see the `run_OSX_MATLAB` script. \r\nOtherwise, you will get a runtime error like \r\n`dyld: Library not loaded: @rpath/libmat.dylib`.\r\n\r\n    * I recommend running via a script, as otherwise setting the \r\n    `DYLD_LIBRARY_PATH` globally may interfere with \r\n    [macports](https://www.macports.org/)' [cmake](http://www.cmake.org/) \r\n    installation (in case you use [cmake](http://www.cmake.org/) from \r\n    [macports](https://www.macports.org/)). If you use a script, \r\n    then the environment variable is local to the script and \r\n    does not interfere with the rest of the system.\r\n\r\n    * Example of running script, run from inside the directory where \r\n    the executable `qpp` is located:\r\n\t    \r\n            #!/bin/sh # Run Quantum++ under OS X with MATLAB support\r\n            \r\n            export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:\"/Applications/MATLAB_R2014b.app/bin/maci64\"\r\n            ./qpp\r\n\r\n- If you build a debug version with [g++](https://gcc.gnu.org/) under \r\n[OS X](http://www.apple.com/osx) and use \r\n[gdb](http://www.gnu.org/software/gdb/) to step inside template functions \r\nyou may want to add `-fno-weak` compiler flag. See \r\n<http://stackoverflow.com/questions/23330641/gnu-gdb-can-not-step-into-template-functions-os-x-mavericks>\r\nfor more details about this problem.\r\n\r\n","google":"UA-56739447-2","note":"Don't delete this file! It's used internally to help with page regeneration."}